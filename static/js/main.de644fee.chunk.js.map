{"version":3,"sources":["redux/countries/countriesActionTypes.js","redux/country/countryActionTypes.js","redux/map/mapActionTypes.js","react/components/header/Header.jsx","redux/countries/countriesActionGenerator.js","redux/country/countryActionGenerator.js","redux/map/mapActionGenerator.js","redux/active/activeTypes.js","react/components/infobox/InfoBox.jsx","redux/active/activeActionGenerator.js","react/components/infoboxContainer/InfoboxContainer.jsx","react/components/map/MapComponent.jsx","react/components/map/drawCircle.jsx","react/components/linegraph/linegraphUtil.js","redux/history/historyActionTypes.js","react/components/linegraph/LineGraph.jsx","redux/history/historyActionCreator.js","react/components/table/Table.jsx","App.js","serviceWorker.js","redux/country/countryUtils.js","redux/country/countryReducer.js","redux/countries/countriesReducer.js","redux/active/activeReducer.js","redux/map/mapReducer.js","redux/history/historyReducer.js","redux/store.js","index.js"],"names":["countriesActionTypes","GET_ALL_COUNTRIES","countryActionTypes","SELECT_COUNTRY","mapActionTypes","connect","dispatch","getCountries","countries","type","payload","getCountry","country","setZoomAndPosition","zoomAndPosition","useState","setCountries","setCountry","useEffect","a","fetch","then","response","json","data","fetchData","onHandleWorldwide","zoom","position","className","FormControl","Select","variant","value","onChange","e","name","target","countryInfo","lat","long","MenuItem","onClick","map","activeTypes","setType","title","newData","totalData","isActive","isRed","isBlue","isGreen","state","active","todayCases","cases","todayRecovered","recovered","todayDeaths","deaths","countriesInfo","setCountriesInfo","Map","center","TileLayer","url","radiusKoefficient","fillOpacity","color","fillColor","countriesArray","Object","values","radius","Math","sqrt","Circle","Popup","style","backgroundImage","flag","drawCircle","classifyData","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","historyActionTypes","console","log","history","historyData","getHistory","setHistoryActionGenerator","info","keys","critical","population","App","Boolean","window","location","hostname","match","countryUtil","countryData","INITIAL_STATE","rootReducer","combineReducers","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.de644fee.chunk.js","sourcesContent":["const countriesActionTypes = {\r\n  GET_ALL_COUNTRIES: \"GET_ALL_COUNTRIES\",\r\n};\r\nexport default countriesActionTypes;\r\n","const countryActionTypes = {\r\n  SELECT_COUNTRY: \"SELECT_COUNTRY\",\r\n};\r\nexport default countryActionTypes;\r\n","export const mapActionTypes = {\r\n  SET_ZOOM_AND_POSITION: \"SET_ZOOM_AND_POSITION\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { countriesActionGenerator } from \"../../../redux/countries/countriesActionGenerator\";\r\nimport { selectCountryActionGenerator } from \"../../../redux/country/countryActionGenerator\";\r\nimport { setZoomAndPosition } from \"../../../redux/map/mapActionGenerator\";\r\nimport \"./header.scss\";\r\nimport { MenuItem, FormControl, Select } from \"@material-ui/core\";\r\n\r\nfunction Header({ getCountries, getCountry, setZoomAndPosition }) {\r\n  const [countries, setCountries] = useState([]);\r\n  const [country, setCountry] = useState(\"worldwide\");\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response) =>\r\n        response.json().then((data) => {\r\n          setCountries(data);\r\n          getCountries(data);\r\n        })\r\n      );\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  const onHandleSelectCountry = (e) => {\r\n    const name = e.target.value;\r\n    if (name !== \"worldwide\") {\r\n      const fetchData = async () => {\r\n        await fetch(\r\n          `https://disease.sh/v3/covid-19/countries/${name}?strict=true`\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            getCountry(data);\r\n            const zoomAndPosition = {\r\n              zoom: 5,\r\n              position: [data.countryInfo.lat, data.countryInfo.long],\r\n            };\r\n            setZoomAndPosition(zoomAndPosition);\r\n          });\r\n      };\r\n      fetchData();\r\n      setCountry(name);\r\n    }\r\n  };\r\n\r\n  const onHandleWorldwide = (e = \"event\") => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/all\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          getCountry(data);\r\n          const zoomAndPosition = {\r\n            zoom: 3,\r\n            position: [38, -97],\r\n          };\r\n          setZoomAndPosition(zoomAndPosition);\r\n        });\r\n    };\r\n    fetchData();\r\n    setCountry(\"worldwide\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    onHandleWorldwide();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header__title\">Covid-19 data tracker</h1>\r\n      <FormControl className=\"header__dropdown\">\r\n        <Select\r\n          variant=\"outlined\"\r\n          value={country}\r\n          onChange={onHandleSelectCountry}\r\n        >\r\n          <MenuItem value=\"worldwide\" onClick={(e) => onHandleWorldwide(e)}>\r\n            worldwide\r\n          </MenuItem>\r\n          {countries.map((country) => {\r\n            return (\r\n              <MenuItem value={country.country}>{country.country}</MenuItem>\r\n            );\r\n          })}\r\n        </Select>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getCountries: (countries) => dispatch(countriesActionGenerator(countries)),\r\n    getCountry: (country) => dispatch(selectCountryActionGenerator(country)),\r\n    setZoomAndPosition: (zoomAndPosition) =>\r\n      dispatch(setZoomAndPosition(zoomAndPosition)),\r\n  };\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(Header);\r\n","import countriesActionTypes from \"./countriesActionTypes\";\r\n\r\nexport const countriesActionGenerator = (countryData) => {\r\n  return {\r\n    type: countriesActionTypes.GET_ALL_COUNTRIES,\r\n    payload: countryData,\r\n  };\r\n};\r\n","import countryActionTypes from \"./countryActionTypes\";\r\n\r\nexport const selectCountryActionGenerator = (countryData) => {\r\n  return {\r\n    type: countryActionTypes.SELECT_COUNTRY,\r\n    payload: countryData,\r\n  };\r\n};\r\n","import { mapActionTypes } from \"./mapActionTypes\";\r\nexport const setZoomAndPosition = (payload) => {\r\n  return {\r\n    type: mapActionTypes.SET_ZOOM_AND_POSITION,\r\n    payload: payload,\r\n  };\r\n};\r\n","export const activeTypes = {\r\n  SET_TYPE: \"SET_TYPE\",\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { setType } from \"../../../redux/active/activeActionGenerator\";\r\nimport \"./infobox.scss\";\r\nfunction InfoBox({\r\n  title,\r\n  newData,\r\n  totalData,\r\n  type,\r\n  setType,\r\n  isActive,\r\n  isRed,\r\n  isBlue,\r\n  isGreen,\r\n}) {\r\n  return (\r\n    <div\r\n      className={`infobox ${isActive && \"infobox__active\"} ${\r\n        isRed && \"infobox__active--red\"\r\n      } ${isBlue && \"infobox__active--blue\"} ${\r\n        isGreen && \"infobox__active--green\"\r\n      }`}\r\n      onClick={() => setType(type)}\r\n    >\r\n      <div className=\"infobox__title\">{title}</div>\r\n      <div className=\"infobox__newdata\">today's: {newData}</div>\r\n      <div className=\"infobox__total\">total: {totalData}</div>\r\n    </div>\r\n  );\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    setType: (type) => dispatch(setType(type)),\r\n  };\r\n};\r\nexport default connect(null, mapDispatchToProps)(InfoBox);\r\n","import { activeTypes } from \"./activeTypes\";\r\nexport const setType = (type = \"cases\") => {\r\n  return {\r\n    type: activeTypes.SET_TYPE,\r\n    payload: type,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport InfoBox from \"../infobox/InfoBox\";\r\nimport \"./infoboxContainer.scss\";\r\nimport { setType } from \"../../../redux/active/activeActionGenerator\";\r\n\r\nfunction InfoboxContainer({ country, active }) {\r\n  return (\r\n    <div className=\"infobox-c\">\r\n      <InfoBox\r\n        isBlue={active === \"cases\"}\r\n        isActive={active === \"cases\"}\r\n        type=\"cases\"\r\n        title=\"cases\"\r\n        newData={country.todayCases}\r\n        totalData={country.cases}\r\n      />\r\n      <InfoBox\r\n        isActive={active === \"recovered\"}\r\n        isGreen={active === \"recovered\"}\r\n        title=\"recovered\"\r\n        type=\"recovered\"\r\n        newData={country.todayRecovered}\r\n        totalData={country.recovered}\r\n      />\r\n      <InfoBox\r\n        isRed={active === \"deaths\"}\r\n        isActive={active === \"deaths\"}\r\n        title=\"deaths\"\r\n        type=\"deaths\"\r\n        newData={country.todayDeaths}\r\n        totalData={country.deaths}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    country: state.country,\r\n    active: state.active.type,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(InfoboxContainer);\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Map, TileLayer } from \"react-leaflet\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport \"./map.scss\";\r\nimport { drawCircle } from \"./drawCircle\";\r\nconst position = [51.505, -0.09];\r\n\r\nfunction MapComponent({ countries, active, position, zoom }) {\r\n  const [countriesInfo, setCountriesInfo] = useState(countries);\r\n\r\n  useEffect(() => {\r\n    setCountriesInfo(countries);\r\n  }, [countries]);\r\n\r\n  return (\r\n    <div className=\"map\">\r\n      <Map center={position} zoom={zoom}>\r\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n        {drawCircle(countriesInfo, active)}\r\n      </Map>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    countries: state.countries,\r\n    active: state.active.type,\r\n    zoom: state.map.zoom,\r\n    position: state.map.position,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(MapComponent);\r\n","import React from \"react\";\r\nimport { Popup, Circle } from \"react-leaflet\";\r\n\r\nexport const drawCircle = (countries, active = \"cases\") => {\r\n  const countriesArray = Object.values(countries);\r\n  let radiusKoefficient;\r\n  let fillOpacity;\r\n  let color;\r\n  let fillColor;\r\n  if (active === \"cases\") {\r\n    fillOpacity = 0.4;\r\n    color = \"#555555\";\r\n    fillColor = \"#555555\";\r\n    radiusKoefficient = 1000;\r\n  } else if (active === \"deaths\") {\r\n    fillOpacity = 0.4;\r\n    color = \"red\";\r\n    fillColor = \"red\";\r\n    radiusKoefficient = 2000;\r\n  } else if (active === \"recovered\") {\r\n    fillOpacity = 0.4;\r\n    color = \"green\";\r\n    fillColor = \"green\";\r\n    radiusKoefficient = 1500;\r\n  }\r\n  return countriesArray.map((country) => {\r\n    const center = [country.countryInfo.lat, country.countryInfo.long];\r\n    let radius =\r\n      (active === \"cases\" && Math.sqrt(country.cases) * radiusKoefficient) ||\r\n      (active === \"recovered\" &&\r\n        Math.sqrt(country.recovered) * radiusKoefficient) ||\r\n      (active === \"deaths\" && Math.sqrt(country.deaths) * radiusKoefficient);\r\n    return (\r\n      <Circle\r\n        center={center}\r\n        fillOpacity={fillOpacity}\r\n        color={color}\r\n        fillColor={fillColor}\r\n        radius={radius}\r\n      >\r\n        <Popup className=\"popup\">\r\n          <div\r\n            className=\"popup__flag\"\r\n            style={{\r\n              backgroundImage: `url(${country.countryInfo.flag})`,\r\n            }}\r\n          />\r\n          <div className=\"popup__info\">\r\n            <p>{country.country}</p>\r\n            <p>active: {country.active}</p>\r\n            <p>total deaths: {country.deaths}</p>\r\n          </div>\r\n        </Popup>\r\n      </Circle>\r\n    );\r\n  });\r\n};\r\n","export const classifyData = (labels, data, type = \"cases\") => {\r\n  return {\r\n    labels: labels,\r\n    datasets: [\r\n      {\r\n        label: type,\r\n        fill: false,\r\n        lineTension: 0.1,\r\n        backgroundColor: \"rgba(75,192,192,0.9)\",\r\n        borderColor: \"red\",\r\n        borderCapStyle: \"butt\",\r\n        borderDash: [],\r\n        borderDashOffset: 0.0,\r\n        borderJoinStyle: \"miter\",\r\n        pointBorderColor: \"rgba(75,192,192,1)\",\r\n        pointBackgroundColor: \"#fff\",\r\n        pointBorderWidth: 1,\r\n        pointHoverRadius: 5,\r\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\r\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\r\n        pointHoverBorderWidth: 2,\r\n        pointRadius: 1,\r\n        pointHitRadius: 10,\r\n        data: data,\r\n      },\r\n    ],\r\n  };\r\n};\r\n","export const historyActionTypes = {\r\n  SET_HISTORY: \"SET_HISTORY\",\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { connect } from \"react-redux\";\r\nimport { classifyData } from \"./linegraphUtil\";\r\nimport { setHistoryActionGenerator } from \"../../../redux/history/historyActionCreator\";\r\nimport \"./linegraph.scss\";\r\nfunction LineGraph({ type, getHistory, labels, historyData }) {\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=all\")\r\n        .then((response) => response.json())\r\n        .then((info) => {\r\n          console.log(\"info from linegraph = \", info);\r\n\r\n          const history = {\r\n            labels: Object.keys(info[type]),\r\n            data: Object.values(info[type]),\r\n          };\r\n          getHistory(history);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [labels, historyData]);\r\n  return (\r\n    <div className=\"linegraph\">\r\n      <Line data={classifyData(labels, historyData, type)} />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  console.log(\"state in mapStateToProps of LineGraph = \", state);\r\n  return {\r\n    type: state.active.type,\r\n    labels: state.history.history.labels,\r\n    historyData: state.history.history.data,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    getHistory: (history) => dispatch(setHistoryActionGenerator(history)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LineGraph);\r\n","import { historyActionTypes } from \"./historyActionTypes\";\r\nexport const setHistoryActionGenerator = (history) => {\r\n  return {\r\n    type: historyActionTypes.SET_HISTORY,\r\n    payload: history,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"./table.scss\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <table className=\"table\">\r\n      <tr className=\"table__row--heading\">\r\n        <th className=\"table__heading\">country</th>\r\n        <th className=\"table__heading\">total cases</th>\r\n        <th className=\"table__heading\">today cases</th>\r\n        <th className=\"table__heading\">total recovered</th>\r\n        <th className=\"table__heading\">today recovered</th>\r\n        <th className=\"table__heading\">total deaths</th>\r\n        <th className=\"table__heading\">today deaths</th>\r\n        <th className=\"table__heading\">active</th>\r\n        <th className=\"table__heading\">critical</th>\r\n        <th className=\"table__heading\">population</th>\r\n      </tr>\r\n      {Object.values(countries).map((country) => {\r\n        return (\r\n          <tr className=\"table__row--data\">\r\n            <td className=\"table__data\">{country.country}</td>\r\n            <td className=\"table__data\">{country.cases}</td>\r\n            <td className=\"table__data\">{country.todayCases}</td>\r\n            <td className=\"table__data\">{country.recovered}</td>\r\n            <td className=\"table__data\">{country.todayRecovered}</td>\r\n            <td className=\"table__data\">{country.deaths}</td>\r\n            <td className=\"table__data\">{country.todayDeaths}</td>\r\n            <td className=\"table__data\">{country.active}</td>\r\n            <td className=\"table__data\">{country.critical}</td>\r\n            <td className=\"table__data\">{country.population}</td>\r\n          </tr>\r\n        );\r\n      })}\r\n    </table>\r\n  );\r\n}\r\nconst mapStatesToProps = (state) => {\r\n  return {\r\n    countries: state.countries,\r\n  };\r\n};\r\nexport default connect(mapStatesToProps)(Table);\r\n","import React from \"react\";\nimport Header from \"./react/components/header/Header\";\n\nimport { Card, CardContent } from \"@material-ui/core\";\nimport \"./app.scss\";\nimport InfoboxContainer from \"./react/components/infoboxContainer/InfoboxContainer\";\nimport MapComponent from \"./react/components/map/MapComponent\";\n// import \"leaflet/dist/leaflet.scss\";\nimport LineGraph from \"./react/components/linegraph/LineGraph\";\nimport Table from \"./react/components/table/Table\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header />\n      <InfoboxContainer />\n      <LineGraph />\n      <MapComponent />\n      <Table />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const countryUtil = (countryData) => {\r\n  return {\r\n    country: countryData?.country,\r\n    todayCases: countryData.todayCases,\r\n    cases: countryData.cases,\r\n    todayRecovered: countryData.todayRecovered,\r\n    recovered: countryData.recovered,\r\n    todayDeaths: countryData.todayDeaths,\r\n    deaths: countryData.deaths,\r\n    population: countryData.population,\r\n  };\r\n};\r\n","import countryActionTypes from \"./countryActionTypes\";\r\nimport { countryUtil } from \"./countryUtils\";\r\nconst INITIAL_STATE = {\r\n  country: \"\",\r\n  todayCases: 0,\r\n  cases: 0,\r\n  todayRecovered: 0,\r\n  recovered: 0,\r\n  todayDeaths: 0,\r\n  deaths: 0,\r\n  population: 0,\r\n};\r\n\r\nexport const countryReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case countryActionTypes.SELECT_COUNTRY:\r\n      return { ...state, ...countryUtil(action.payload) };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import countriesActionTypes from \"./countriesActionTypes\";\r\n\r\nconst INITIAL_STATE = {};\r\n\r\nexport const countriesReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case countriesActionTypes.GET_ALL_COUNTRIES:\r\n      return { ...state, ...action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { activeTypes } from \"./activeTypes\";\r\n\r\nconst INITIAL_STATE = {\r\n  type: \"cases\",\r\n};\r\n\r\nexport const activeReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case activeTypes.SET_TYPE:\r\n      return { ...state, type: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { mapActionTypes } from \"./mapActionTypes\";\r\nconst INITIAL_STATE = {\r\n  zoom: 3,\r\n  position: [38, -97],\r\n};\r\n\r\nexport const mapReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case mapActionTypes.SET_ZOOM_AND_POSITION:\r\n      return {\r\n        ...state,\r\n        zoom: action.payload.zoom,\r\n        position: action.payload.position,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { historyActionTypes } from \"./historyActionTypes\";\r\nconst INITIAL_STATE = {\r\n  history: {\r\n    labels: [],\r\n    data: [],\r\n  },\r\n};\r\nexport const historyReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case historyActionTypes.SET_HISTORY:\r\n      return { ...state, history: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { createStore, combineReducers } from \"redux\";\r\nimport { countryReducer } from \"./country/countryReducer\";\r\nimport { countriesReducer } from \"./countries/countriesReducer\";\r\nimport { activeReducer } from \"./active/activeReducer\";\r\nimport { mapReducer } from \"./map/mapReducer\";\r\nimport { historyReducer } from \"./history/historyReducer\";\r\nconst rootReducer = combineReducers({\r\n  country: countryReducer,\r\n  countries: countriesReducer,\r\n  active: activeReducer,\r\n  map: mapReducer,\r\n  history: historyReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}